---
- hosts: local
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.micro
    security_group: webservers_sg
    image: ami-02ccb28830b645a41
    keypair: ohio-home
    pemkey: /root/revision/lamp/ohiohome.pem
    region: us-east-2
    count: 1
  vars_files:
    - aws_keys.yml
    - mysql.vars
  tasks:
    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: The webservers security group
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    - name: Launch the new EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true 
        region: "{{ region }}"
        keypair: "{{ keypair }}"
        count: "{{count}}"
      register: ec2_reg
      
  
    - name: Add ec2 to inventory
      add_host:
        hostname: ec2  
        ansible_host: "{{ ec2_reg.instances.0.public_ip }}"
        ansible_port: 22
        ansible_user: "ec2-user"
        ansible_ssh_private_key_file: "{{ pemkey }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Tag instance
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: present
      with_items: "{{ ec2_reg.instances }}"
      args:
       tags:
         Type: AnsibleEc2

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22 
        state: started 
      with_items: "{{ ec2_reg.instances }}"
    
    - name: Install Apache, PHP, MySQL
      delegate_to: ec2
      become: yes
      yum:
        name:
          - httpd
          - mariadb-server
          - MySQL-python
          - php
          - php-mysql
        state: present

    - name: Start services
      delegate_to: ec2
      become: true
      service:
        name: mariadb
        state: restarted
        enabled: yes
    
    - name: "Mariadb - Setting Root Password"
      delegate_to: ec2
      ignore_errors: true
      mysql_user:
        login_user: "root"
        login_password: ""
        name: root
        password: "{{ mysql_root_password }}"
        host_all: true
            
    - name: "Mariadb - Removing Anonymous Users"
      delegate_to: ec2
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: ""
        host_all: yes
        state: absent
            
    - name: "Mariadb - Creating Database"
      delegate_to: ec2
      mysql_db:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: "{{ mysql_database }}"
        state: present
        
    - name: "mariadb - Creating User"
      delegate_to: ec2
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        host: "localhost"
        priv: "{{ mysql_database }}.*:ALL"
        state: present
